<?xml version="1.0" encoding="UTF-8"?>
<beans xmlns="http://www.springframework.org/schema/beans"
       xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
       xmlns:context="http://www.springframework.org/schema/context"
       xmlns:aop="http://www.springframework.org/schema/aop"
       xmlns:tx="http://www.springframework.org/schema/tx"
       xmlns:jpa="http://www.springframework.org/schema/data/jpa"
       xsi:schemaLocation="http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans.xsd
        http://www.springframework.org/schema/data/jpa
        http://www.springframework.org/schema/data/jpa/spring-jpa-1.3.xsd
        http://www.springframework.org/schema/tx http://www.springframework.org/schema/tx/spring-tx-4.0.xsd
        http://www.springframework.org/schema/context http://www.springframework.org/schema/context/spring-context-4.0.xsd
        http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans.xsd http://www.springframework.org/schema/aop http://www.springframework.org/schema/aop/spring-aop.xsd">

    <!-- 配置自动扫描的包 -->
    <context:component-scan base-package="com.augmentum.springdata"></context:component-scan>

    <!-- 1. 配置数据源 -->
    <context:property-placeholder location="classpath:db.properties"/>
    <!-- 数据源 -->
    <bean id="dataSource" class="com.alibaba.druid.pool.DruidDataSource" init-method="init" destroy-method="close">
        <property name="username" value="${user}"></property>
        <property name="password" value="${password}"></property>
        <property name="driverClassName" value="${driverClass}"></property>
        <property name="url" value="${jdbcUrl}"></property>
        <!--<property name="initialSize" value="${druid.initialSize}"/>-->
        <!--<property name="maxActive" value="${druid.maxActive}"/>-->
        <!--<property name="maxIdle" value="${druid.maxIdle}"/>-->
        <!--<property name="minIdle" value="${druid.minIdle}"/>-->
        <!--<property name="maxWait" value="${druid.maxWait}"/>-->
        <!--<property name="removeAbandoned" value="${druid.removeAbandoned}"/>-->
        <!--<property name="removeAbandonedTimeout" value="${druid.removeAbandonedTimeout}"/>-->
        <!--<property name="timeBetweenEvictionRunsMillis" value="${druid.timeBetweenEvictionRunsMillis}"/>-->
        <!--<property name="minEvictableIdleTimeMillis" value="${druid.minEvictableIdleTimeMillis}"/>-->
        <!--<property name="validationQuery" value="${druid.validationQuery}"/>-->
        <!--<property name="testWhileIdle" value="${druid.testWhileIdle}"/>-->
        <!--<property name="testOnBorrow" value="${druid.testOnBorrow}"/>-->
        <!--<property name="testOnReturn" value="${druid.testOnReturn}"/>-->
        <!--<property name="poolPreparedStatements" value="${druid.poolPreparedStatements}"/>-->
        <!--<property name="maxPoolPreparedStatementPerConnectionSize"-->
                  <!--value="${druid.maxPoolPreparedStatementPerConnectionSize}"/>-->
        <!--<property name="filters" value="${druid.filters}"/>-->
    </bean>

    <!-- 2. 配置 JPA 的 EntityManagerFactory -->
    <bean id="entityManagerFactory" class="org.springframework.orm.jpa.LocalContainerEntityManagerFactoryBean">
        <property name="dataSource" ref="dataSource"/>
        <property name="packagesToScan" value="com.augmentum.springdata.entities"/>
        <property name="jpaVendorAdapter">
            <bean class="org.springframework.orm.jpa.vendor.HibernateJpaVendorAdapter">
                <property name="generateDdl" value="false"/>
                <property name="database" value="MYSQL"/>
                <property name="databasePlatform" value="org.hibernate.dialect.MySQL5InnoDBDialect"/>
                <property name="showSql" value="true"/>
            </bean>
        </property>
        <!-- 用于指定一些高级特性,如事务管理等 -->
        <property name="jpaDialect">
            <bean class="org.springframework.orm.jpa.vendor.HibernateJpaDialect"/>
        </property>
        <property name="jpaPropertyMap">
            <map>
                <!-- 将Hibernate查询中的符号映射到SQL查询中的符号 (符号可能是函数名或常量名字). 取值 hqlLiteral=SQL_LITERAL, hqlFunction=SQLFUNC -->
                <entry key="hibernate.query.substitutions" value="true 1, false 0"/>
                <!--为Hibernate关联的批量抓取设置默认数量.取值 建议的取值为4, 8, 和16-->
                <entry key="hibernate.default_batch_fetch_size" value="16"/>
                <!-- 如果开启, Hibernate将收集有助于性能调节的统计数据. -->
                <entry key="hibernate.generate_statistics" value="true"/>

                <!-- 非零值，允许Hibernate使用JDBC2的批量更新. 取值 建议取5到30之间的值 -->
                <!-- The first property tells Hibernate to collect inserts in batches of four. The order_inserts property tells Hibernate to take the time to group inserts by entity, creating larger batches. -->
                <entry key="hibernate.jdbc.batch_size" value="16"/>
                <entry key=" hibernate.order_inserts" value="true"/>

                <!-- 为单向关联(一对一, 多对一)的外连接抓取（outer join fetch）树设置最大深度. 值为0意味着将关闭默认的外连接抓取. 取值 建议在0到3之间取值 -->
                <entry key="hibernate.max_fetch_depth" value="2"/>
                <!-- 开启CGLIB来替代运行时反射机制(系统级属性). 反射机制有时在除错时比较有用. 注意即使关闭这个优化, Hibernate还是需要CGLIB. 你不能在hibernate.cfg.xml中设置此属性. 取值 true | false -->
                <entry key="hibernate.bytecode.use_reflection_optimizer" value="true"/>
                <!-- 能用来完全禁止使用二级缓存. 对那些在类的映射定义中指定<cache>的类，会默认开启二级缓存. 取值 true|false -->
                <entry key="hibernate.cache.use_second_level_cache" value="false"/>
                <!-- 允许查询缓存, 个别查询仍然需要被设置为可缓存的. 取值 true|false -->
                <entry key="hibernate.cache.use_query_cache" value="false"/>
                <!-- the strategy genrerate table in db  -->
                <entry key="hibernate.hbm2ddl.auto" value="update"/>
                <!-- 输出所有SQL语句到控制台. 有一个另外的选择是把org.hibernate.SQL这个log category设为debug。 eg. true | false -->
                <entry key="hibernate.show_sql" value="true"/>
            </map>
        </property>
    </bean>

    <!-- 3. 配置事务管理器 -->
    <bean id="transactionManager" class="org.springframework.orm.jpa.JpaTransactionManager">
        <property name="entityManagerFactory" ref="entityManagerFactory"/>
    </bean>

    <!-- 4. 配置支持注解的事务 -->
    <tx:annotation-driven />

    <!-- 5. 事务 -->
    <tx:advice id="txAdvice">
        <tx:attributes>
            <tx:method name="*"/>
            <tx:method name="get*" read-only="true"/>
            <tx:method name="find*" read-only="true"/>
            <tx:method name="select*" read-only="true"/>
            <tx:method name="delete*"/>
            <tx:method name="update*"/>
            <tx:method name="add*"/>
            <tx:method name="insert*"/>
        </tx:attributes>
    </tx:advice>

    <!-- 5.1 配置事务切入点, 以及把事务切入点和事务属性关联起来 -->
    <aop:config>
        <aop:pointcut id="pointcut" expression="execution(* com.augmentum.springdata.service.*.*(..))"/>
        <!--&lt;!&ndash;<aop:advisor pointcut-ref="pointcut" advice-ref="txAdvice"/>&ndash;&gt;-->
    </aop:config>

    <!-- 6. 配置 SpringData -->
    <!-- 加入 jpa 的命名空间; base-package: 扫描 Repository Bean 所在的 package -->
    <jpa:repositories base-package="com.augmentum.springdata" repository-impl-postfix="Impl"
                      transaction-manager-ref="transactionManager" entity-manager-factory-ref="entityManagerFactory"/>

    <!-- 7. AOP 配置自动为匹配 aspectJ 注解的 Java 类生成代理对象-->
    <aop:aspectj-autoproxy proxy-target-class="false"/>
</beans>
