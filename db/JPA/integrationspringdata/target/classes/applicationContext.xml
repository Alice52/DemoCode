<?xml version="1.0" encoding="UTF-8"?>
<beans xmlns="http://www.springframework.org/schema/beans"
       xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
       xmlns:context="http://www.springframework.org/schema/context"
       xmlns:aop="http://www.springframework.org/schema/aop"
       xmlns:tx="http://www.springframework.org/schema/tx"
       xmlns:jpa="http://www.springframework.org/schema/data/jpa"
       xsi:schemaLocation="http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans.xsd
        http://www.springframework.org/schema/data/jpa
        http://www.springframework.org/schema/data/jpa/spring-jpa-1.3.xsd
        http://www.springframework.org/schema/tx http://www.springframework.org/schema/tx/spring-tx-4.0.xsd
        http://www.springframework.org/schema/context http://www.springframework.org/schema/context/spring-context-4.0.xsd
        http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans.xsd http://www.springframework.org/schema/aop http://www.springframework.org/schema/aop/spring-aop.xsd">

    <!-- 配置自动扫描的包 -->
    <context:component-scan base-package="com.augmentum.springdata"></context:component-scan>

    <!-- 1. 配置数据源 -->
    <context:property-placeholder location="classpath:db.properties"/>
    <!-- 数据源 -->
    <bean id="dataSource" class="com.alibaba.druid.pool.DruidDataSource" init-method="init" destroy-method="close">
        <property name="username" value="${user}"></property>
        <property name="password" value="${password}"></property>
        <property name="driverClassName" value="${driverClass}"></property>
        <property name="url" value="${jdbcUrl}"></property>
        <!--<property name="initialSize" value="${druid.initialSize}"/>-->
        <!--<property name="maxActive" value="${druid.maxActive}"/>-->
        <!--<property name="maxIdle" value="${druid.maxIdle}"/>-->
        <!--<property name="minIdle" value="${druid.minIdle}"/>-->
        <!--<property name="maxWait" value="${druid.maxWait}"/>-->
        <!--<property name="removeAbandoned" value="${druid.removeAbandoned}"/>-->
        <!--<property name="removeAbandonedTimeout" value="${druid.removeAbandonedTimeout}"/>-->
        <!--<property name="timeBetweenEvictionRunsMillis" value="${druid.timeBetweenEvictionRunsMillis}"/>-->
        <!--<property name="minEvictableIdleTimeMillis" value="${druid.minEvictableIdleTimeMillis}"/>-->
        <!--<property name="validationQuery" value="${druid.validationQuery}"/>-->
        <!--<property name="testWhileIdle" value="${druid.testWhileIdle}"/>-->
        <!--<property name="testOnBorrow" value="${druid.testOnBorrow}"/>-->
        <!--<property name="testOnReturn" value="${druid.testOnReturn}"/>-->
        <!--<property name="poolPreparedStatements" value="${druid.poolPreparedStatements}"/>-->
        <!--<property name="maxPoolPreparedStatementPerConnectionSize"-->
                  <!--value="${druid.maxPoolPreparedStatementPerConnectionSize}"/>-->
        <!--<property name="filters" value="${druid.filters}"/>-->
    </bean>

    <!-- 2. 配置 JPA 的 EntityManagerFactory -->
    <bean id="entityManagerFactory" class="org.springframework.orm.jpa.LocalContainerEntityManagerFactoryBean">
        <property name="dataSource" ref="dataSource"/>
        <property name="packagesToScan" value="com.augmentum.springdata.entities"/>
        <property name="jpaVendorAdapter">
            <bean class="org.springframework.orm.jpa.vendor.HibernateJpaVendorAdapter">
                <property name="generateDdl" value="false"/>
                <property name="database" value="MYSQL"/>
                <property name="databasePlatform" value="org.hibernate.dialect.MySQL5InnoDBDialect"/>
                <property name="showSql" value="true"/>
            </bean>
        </property>
        <!-- 用于指定一些高级特性,如事务管理等 -->
        <property name="jpaDialect">
            <bean class="org.springframework.orm.jpa.vendor.HibernateJpaDialect"/>
        </property>
        <property name="jpaPropertyMap">
            <map>
                <entry key="hibernate.query.substitutions" value="true 1, false 0"/>
                <entry key="hibernate.default_batch_fetch_size" value="16"/>
                <entry key="hibernate.max_fetch_depth" value="2"/>
                <entry key="hibernate.generate_statistics" value="true"/>
                <entry key="hibernate.bytecode.use_reflection_optimizer" value="true"/>
                <entry key="hibernate.cache.use_second_level_cache" value="false"/>
                <entry key="hibernate.cache.use_query_cache" value="false"/>
                <entry key="hibernate.hbm2ddl.auto" value="update"/>
                <entry key="hibernate.show_sql" value="true"/>
            </map>
        </property>


      <!---->
        <!--&lt;!&ndash; 配置 JPA 的基本属性. 例如 JPA 实现产品的属性 &ndash;&gt;-->
        <!--<property name="jpaProperties">-->
            <!--<props>-->
                <!--<prop key="hibernate.show_sql">true</prop>-->
                <!--<prop key="hibernate.format_sql">true</prop>-->
                <!--&lt;!&ndash; 建表 create、create-drop、update、validate、none &ndash;&gt;-->
                <!--<prop key="hibernate.hbm2ddl.auto">update</prop>-->
            <!--</props>-->
        <!--</property>-->
    </bean>

    <!-- 3. 配置事务管理器 -->
    <bean id="transactionManager" class="org.springframework.orm.jpa.JpaTransactionManager">
        <property name="entityManagerFactory" ref="entityManagerFactory"/>
    </bean>

    <!-- 4. 配置支持注解的事务 -->
    <tx:annotation-driven />

    <!-- 5. 事务 -->
    <tx:advice id="txAdvice">
        <tx:attributes>
            <tx:method name="*"/>
            <tx:method name="get*" read-only="true"/>
            <tx:method name="find*" read-only="true"/>
            <tx:method name="select*" read-only="true"/>
            <tx:method name="delete*"/>
            <tx:method name="update*"/>
            <tx:method name="add*"/>
            <tx:method name="insert*"/>
        </tx:attributes>
    </tx:advice>

    <!-- 5.1 配置事务切入点, 以及把事务切入点和事务属性关联起来 -->
    <aop:config>
        <aop:pointcut id="pointcut" expression="execution(* com.augmentum.springdata.service.*.*(..))"/>
        <!--&lt;!&ndash;<aop:advisor pointcut-ref="pointcut" advice-ref="txAdvice"/>&ndash;&gt;-->
    </aop:config>

    <!-- 6. 配置 SpringData -->
    <!-- 加入 jpa 的命名空间; base-package: 扫描 Repository Bean 所在的 package -->
    <jpa:repositories base-package="com.augmentum.springdata" repository-impl-postfix="Impl"
                      transaction-manager-ref="transactionManager" entity-manager-factory-ref="entityManagerFactory"/>

    <!-- 7. AOP 配置自动为匹配 aspectJ 注解的 Java 类生成代理对象-->
    <aop:aspectj-autoproxy proxy-target-class="false"/>
</beans>
