<?xml version="1.0" encoding="UTF-8" ?>
<!DOCTYPE mapper
        PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN"
        "http://mybatis.org/dtd/mybatis-3-mapper.dtd">
<mapper namespace="cn.edu.ntu.mybatis.sample.EmployeeMapper">
    <!--
    namespace: 名称空间;指定为接口的全类名
    id:  唯一标识
    resultType:  返回值类型
    #{id}:  从传递过来的参数中取出id值

    public Employee getEmpById(Integer id);
     -->
    <!-- handle column mapping -->
    <resultMap id="BaseResultMap" type="Employee">
        <result column="name" property="lastName"></result>
    </resultMap>

    <select id="getEmpById" resultMap="BaseResultMap">
        SELECT id, name, email, gender FROM `mybatis.employee` WHERE id = #{id}
    </select>

    <select id="getEmpByDeptId" resultMap="BaseResultMap">
        SELECT id, name, email, gender FROM `mybatis.employee` WHERE deptId = #{deptId}
    </select>

    <select id="getEmpByLastNameLikeReturnMap" resultMap="BaseResultMap">
        SELECT id, name, email, gender FROM `mybatis.employee` WHERE name LIKE '${param1}%'
    </select>

    <!-- public List<Employee> getEmpsByLastNameLike(String lastName); -->
    <!--resultType: 如果返回的是一个集合, 要写集合中元素的类型  -->
    <select id="getEmpsByLastNameLike" resultMap="BaseResultMap">
        SELECT id, name, email, gender FROM `mybatis.employee` WHERE name LIKE '${lastName}%'
    </select>

    <select id="getEmpByIdReturnMap" resultType="map" databaseId="mysql">
        SELECT id, name, email, gender FROM `mybatis.employee` WHERE id=#{id}
    </select>

    <select id="getEmpByMap" resultMap="BaseResultMap">
        select id, name, email, gender from ${tableName} where id=${id} and name=#{lastName}
    </select>


    <!-- parameterType: 参数类型, 可以省略,
    获取自增主键的值: 
        mysql支持自增主键, 自增主键值的获取, mybatis也是利用statement.getGeneratedKeys();
        useGeneratedKeys="true"; 使用自增主键获取主键值策略
        keyProperty; 指定对应的主键属性, 也就是mybatis获取到主键值以后, 将这个值封装给javaBean的哪个属性
    -->
    <insert id="addEmp" parameterType="Employee" useGeneratedKeys="true" keyProperty="id" databaseId="mysql">
        INSERT INTO `mybatis.employee` (name, email, gender) VALUES(#{lastName}, #{email}, #{gender})
    </insert>

    <!--
        获取非自增主键的值:
            Oracle不支持自增; Oracle使用序列来模拟自增; 
            每次插入的数据的主键是从序列中拿到的值; 如何获取到这个值; 
     -->
    <insert id="addEmp2" databaseId="mysql">
        <!--
        keyProperty:查出的主键值封装给javaBean的哪个属性
        order="BEFORE":当前sql在插入sql之前运行
               AFTER: 当前sql在插入sql之后运行
        resultType:查出的数据的返回值类型

        BEFORE运行顺序: 
            先运行selectKey查询id的sql; 查出id值封装给javaBean的id属性
            在运行插入的sql; 就可以取出id属性对应的值
        AFTER运行顺序: 
            先运行插入的sql（从序列中取出新值作为id）; 
            再运行selectKey查询id的sql; 
         -->
        <selectKey keyProperty="id" order="BEFORE" resultType="Integer">
            <!-- 编写查询主键的sql语句 -->
            <!-- BEFORE-->
            select EMPLOYEES_SEQ.nextval from dual
            <!-- AFTER: 
             select EMPLOYEES_SEQ.currval from dual -->
        </selectKey>

        <!-- 插入时的主键是从序列中拿到的 -->
        <!-- BEFORE:-->
        insert into employees(EMPLOYEE_ID,LAST_NAME,EMAIL)
        values(#{id}, #{lastName}, #{email})

        <!-- AFTER: 
        insert into employees(EMPLOYEE_ID,LAST_NAME,EMAIL)
        values(employees_seq.nextval,#{lastName},#{email})
        -->
    </insert>

    <update id="updateEmp">
        UPDATE `mybatis.employee`
        SET name=#{lastName}, email=#{email} ,gender=#{gender}
        WHERE id=#{id}
    </update>

    <delete id="deleteEmpById">
        DELETE FROM `mybatis.employee` WHERE id=#{id}
    </delete>


    <resultMap type="Employee" id="MyDifEmp">
        <id column="id" property="id"/>
        <result column="name" property="lastName"/>
        <result column="gender" property="gender"/>
        <result column="did" property="dept.id"/>
        <result column="dept_name" property="dept.departmentName"/>
    </resultMap>

    <!-- 使用 association 定义关联的单个对象的封装规则 -->
    <resultMap type="Employee" id="MyDifEmp2">
        <id column="id" property="id"/>
        <result column="name" property="lastName"/>
        <result column="gender" property="gender"/>

        <!--
            association 可以指定联合的javaBean对象
                property="dept": 指定哪个属性是联合的对象
                javaType: 指定这个属性对象的类型[不能省略]
                select="**DepartmentMapper.getDeptById" 也可以实现相同的功能
        -->
        <association property="dept" javaType="Department">
            <id column="did" property="id"/>
            <result column="dept_name" property="departmentName"/>
        </association>
    </resultMap>
    <!-- MyDifEmp is same function with MyDifEmp2-->
    <select id="getEmpAndDept" resultMap="MyDifEmp">
        SELECT e.id id, e.name name, e.gender gender, d.id did, d.name dept_name
        FROM `mybatis.employee` e, `mybatis.department` d
        WHERE e.deptId=d.id AND e.id=#{id}
    </select>

    <!-- =======================鉴别器============================ -->
    <!--
        <discriminator javaType=""></discriminator>
        鉴别器: mybatis 可以使用 discriminator 判断某列的值, 然后根据某列的值改变封装行为封装 Employee:
            - 如果查出的是女生: 就把部门信息查询出来, 否则不查询
            - 如果是男生, 把 name 这一列的值赋值给email
     -->
    <resultMap type="Employee" id="MyEmpDis">
        <id column="id" property="id"/>
        <result column="name" property="lastName"/>
        <result column="email" property="email"/>
        <result column="gender" property="gender"/>

        <!--
            column: 指定判定的列名
            javaType: 列值对应的java类型
        -->
        <discriminator javaType="string" column="gender">
            <!-- 女生  resultType: 指定封装的结果类型; 不能缺少 resultMap -->
            <case value="0" resultType="Employee">
                <association property="dept"
                             select="cn.edu.ntu.mybatis.sample.DepartmentMapper.getDeptById"
                             column="{id=did}">
                </association>
            </case>
            <!--男生: 如果是男生, 把 name 这一列的值赋值给 email -->
            <case value="1" resultType="Employee">
                <id column="id" property="id"/>
                <result column="name" property="lastName"/>
                <result column="name" property="email"/>
                <result column="gender" property="gender"/>
            </case>
        </discriminator>
    </resultMap>
</mapper>